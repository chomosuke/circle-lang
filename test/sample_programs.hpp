#pragma once

namespace sample_programs {
    constexpr auto HELLO_WORLD = R"((S);
(V) := V_a;

# ((array)) -> len
(F_len) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;

	# loop
	( (V) )(I) := 1;
	((
		( (V) )(Not_found_len);

		( (V) )(Array)(0) := 0;
		( (V) )(Array)( ( (V) )(I) ) := 1;
		( (V) )(Not_found_len) := ( (V) )(Array)(0) != 1;

		( (V) )(I) := ( (V) )(I) + 1;
	));

	( (V) )(I) := ( (V) )(I) - 1;

	(R) := ( (V) )(I);
	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# ((str))
(F_print_str) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;

	( (V) + 1*1 ) := ((0));
	( (V) + 1*1 )(Array) := ( (V) )(Str);
	(F_len);
	( (V) )(Len) := (R);

	# loop
	( (V) )(I) := 0;
	((
		( (V) )(I) < ( (V) )(Len);

		(std_output_char) := ( (V) )(Str)( ( (V) )(I) );
		(std_output);

		( (V) )(I) := ( (V) )(I) + 1;
	));

	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# Hello world\n
( (V) + 1*1 ) := ((0));
( (V) + 1*1 )(Str) := ((72; 101; 108; 108; 111; 32; 87; 111; 114; 108; 100; 33; 10));
(F_print_str);

(S) := 0;
)";

    constexpr auto HELLO_WORLD_TOKEN =
        R"(( S );
( V ) := V_a;
# ((array)) -> len
( F_len ) := ((
( ( V ) + {0 1}{1} * {0 1}{1} );
( V ) := ( V ) + {0 1}{1} * {0 1}{1};
# loop
( ( V ) )( I ) := {0 1}{1};
((
( ( V ) )( Not_found_len );
( ( V ) )( Array )( {}{1} ) := {}{1};
( ( V ) )( Array )( ( ( V ) )( I ) ) := {0 1}{1};
( ( V ) )( Not_found_len ) := ( ( V ) )( Array )( {}{1} ) != {0 1}{1};
( ( V ) )( I ) := ( ( V ) )( I ) + {0 1}{1};
));
( ( V ) )( I ) := ( ( V ) )( I ) - {0 1}{1};
( R ) := ( ( V ) )( I );
( ( V ) ) := {}{1};
( V ) := ( V ) - {0 1}{1} * {0 1}{1};
));
# ((str))
( F_print_str ) := ((
( ( V ) + {0 1}{1} * {0 1}{1} );
( V ) := ( V ) + {0 1}{1} * {0 1}{1};
( ( V ) + {0 1}{1} * {0 1}{1} ) := ((
{}{1}));
( ( V ) + {0 1}{1} * {0 1}{1} )( Array ) := ( ( V ) )( Str );
( F_len );
( ( V ) )( Len ) := ( R );
# loop
( ( V ) )( I ) := {}{1};
((
( ( V ) )( I ) < ( ( V ) )( Len );
( _charstd_output ) := ( ( V ) )( Str )( ( ( V ) )( I ) );
( _outputstd );
( ( V ) )( I ) := ( ( V ) )( I ) + {0 1}{1};
));
( ( V ) ) := {}{1};
( V ) := ( V ) - {0 1}{1} * {0 1}{1};
));
# Hello world\n
( ( V ) + {0 1}{1} * {0 1}{1} ) := ((
{}{1}));
( ( V ) + {0 1}{1} * {0 1}{1} )( Str ) := ((
{0 72}{1};
{0 101}{1};
{0 108}{1};
{0 108}{1};
{0 111}{1};
{0 32}{1};
{0 87}{1};
{0 111}{1};
{0 114}{1};
{0 108}{1};
{0 100}{1};
{0 33}{1};
{0 10}{1}));
( F_print_str );
( S ) := {}{1};
)";

        constexpr auto HELLO_WORLD_HALF_PARSED = R"(
( S )
( V ) := V_a
( F_len ) := ((
    ( ( V ) + {0 1}{1} * {0 1}{1} )
    ( V ) := ( V ) + {0 1}{1} * {0 1}{1}
    ( ( V ) )( I ) := {0 1}{1}
    ((
        ( ( V ) )( Not_found_len )
        ( ( V ) )( Array )( {}{1} ) := {}{1}
        ( ( V ) )( Array )( ( ( V ) )( I ) ) := {0 1}{1}
        ( ( V ) )( Not_found_len ) := ( ( V ) )( Array )( {}{1} ) != {0 1}{1}
        ( ( V ) )( I ) := ( ( V ) )( I ) + {0 1}{1}
    ))
    ( ( V ) )( I ) := ( ( V ) )( I ) - {0 1}{1}
    ( R ) := ( ( V ) )( I )
    ( ( V ) ) := {}{1}
    ( V ) := ( V ) - {0 1}{1} * {0 1}{1}
))
( F_print_str ) := ((
    ( ( V ) + {0 1}{1} * {0 1}{1} )
    ( V ) := ( V ) + {0 1}{1} * {0 1}{1}
    ( ( V ) + {0 1}{1} * {0 1}{1} ) := ((
        {}{1}
    ))
    ( ( V ) + {0 1}{1} * {0 1}{1} )( Array ) := ( ( V ) )( Str )
    ( F_len )
    ( ( V ) )( Len ) := ( R )
    ( ( V ) )( I ) := {}{1}
    ((
        ( ( V ) )( I ) < ( ( V ) )( Len )
        ( _charstd_output ) := ( ( V ) )( Str )( ( ( V ) )( I ) )
        ( _outputstd )
        ( ( V ) )( I ) := ( ( V ) )( I ) + {0 1}{1}
    ))
    ( ( V ) ) := {}{1}
    ( V ) := ( V ) - {0 1}{1} * {0 1}{1}
))
( ( V ) + {0 1}{1} * {0 1}{1} ) := ((
    {}{1}
))
( ( V ) + {0 1}{1} * {0 1}{1} )( Str ) := ((
    {0 72}{1}
    {0 101}{1}
    {0 108}{1}
    {0 108}{1}
    {0 111}{1}
    {0 32}{1}
    {0 87}{1}
    {0 111}{1}
    {0 114}{1}
    {0 108}{1}
    {0 100}{1}
    {0 33}{1}
    {0 10}{1}
))
( F_print_str )
( S ) := {}{1}
)";

    constexpr auto HELLO_WORLD_AST = R"(
[( S )]
[[( V )] := V_a]
[[( F_len )] := ((
    [( [[( V )] + [{0 1}{1} * {0 1}{1}]] )]
    [[( V )] := [[( V )] + [{0 1}{1} * {0 1}{1}]]]
    [[[( [( V )] )]( I )] := {0 1}{1}]
    ((
        [[( [( V )] )]( Not_found_len )]
        [[[[( [( V )] )]( Array )]( {}{1} )] := {}{1}]
        [[[[( [( V )] )]( Array )]( [[( [( V )] )]( I )] )] := {0 1}{1}]
        [[[( [( V )] )]( Not_found_len )] := [[[[( [( V )] )]( Array )]( {}{1} )] != {0 1}{1}]]
        [[[( [( V )] )]( I )] := [[[( [( V )] )]( I )] + {0 1}{1}]]
    ))
    [[[( [( V )] )]( I )] := [[[( [( V )] )]( I )] - {0 1}{1}]]
    [[( R )] := [[( [( V )] )]( I )]]
    [[( [( V )] )] := {}{1}]
    [[( V )] := [[( V )] - [{0 1}{1} * {0 1}{1}]]]
))]
[[( F_print_str )] := ((
    [( [[( V )] + [{0 1}{1} * {0 1}{1}]] )]
    [[( V )] := [[( V )] + [{0 1}{1} * {0 1}{1}]]]
    [[( [[( V )] + [{0 1}{1} * {0 1}{1}]] )] := ((
        {}{1}
    ))]
    [[[( [[( V )] + [{0 1}{1} * {0 1}{1}]] )]( Array )] := [[( [( V )] )]( Str )]]
    [( F_len )]
    [[[( [( V )] )]( Len )] := [( R )]]
    [[[( [( V )] )]( I )] := {}{1}]
    ((
        [[[( [( V )] )]( I )] < [[( [( V )] )]( Len )]]
        [[( _charstd_output )] := [[[( [( V )] )]( Str )]( [[( [( V )] )]( I )] )]]
        [( _outputstd )]
        [[[( [( V )] )]( I )] := [[[( [( V )] )]( I )] + {0 1}{1}]]
    ))
    [[( [( V )] )] := {}{1}]
    [[( V )] := [[( V )] - [{0 1}{1} * {0 1}{1}]]]
))]
[[( [[( V )] + [{0 1}{1} * {0 1}{1}]] )] := ((
    {}{1}
))]
[[[( [[( V )] + [{0 1}{1} * {0 1}{1}]] )]( Str )] := ((
    {0 72}{1}
    {0 101}{1}
    {0 108}{1}
    {0 108}{1}
    {0 111}{1}
    {0 32}{1}
    {0 87}{1}
    {0 111}{1}
    {0 114}{1}
    {0 108}{1}
    {0 100}{1}
    {0 33}{1}
    {0 10}{1}
))]
[( F_print_str )]
[[( S )] := {}{1}]
)";
} // namespace sample_programs
