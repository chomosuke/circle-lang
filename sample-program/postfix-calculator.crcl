(S);
(V) := V_a;

# ((array)) -> len
(F_len) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;
	( (V) )(Array) := ( (V) )(0);

	# loop
	( (V) )(I) := 1;
	((
		( (V) )(Found_len);

		( (V) )(Temp1) := ( (V) )(Array)(0);
		( (V) )(Temp2) := ( (V) )(Array)( ( (V) )(I) );

		( (V) )(Array)(0) := 0;
		( (V) )(Array)( ( (V) )(I) ) := 1;
		( (V) )(Found_len) := ( (V) )(Array)(0) = 1;

		( (V) )(Array)(0) := ( (V) )(Temp1);
		( (V) )(Array)( ( (V) )(I) ) := ( (V) )(Temp2);

		( (V) )(I) := ( (V) )(I) + 1;
	));

	( (V) )(I) := ( (V) )(I) - 1;

	(R) := ( (V) )(I);
	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# ((str))
(F_print_str) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;
	( (V) )(Str) := ( (V) )(0);

	( (V) + 1*1 ) := (( ( (V) )(Str) ));
	(F_len);
	( (V) )(Len) := (R);

	# loop
	( ( (V) )(I) ) := 0;
	((
		( (V) )(I) < ( (V) )(Len);

		(std_output_char) := ( (V) )(Str)( ( (V) )(I) );
		(std_output);

		( (V) )(I) := ( (V) )(I) + 1;
	));

	(std_output_char) := 10;
	(std_output);

	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# (()) -> vec
(F_vec_create) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;

	(R) := ((0; ((0)) ));

	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# ((vec; e)) -> vec
(F_vec_push) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;

	( (V) )(0)(1)( ( (V) )(0)(0) ) := ( (V) )(1);
	( (V) )(0)(0) := ( (V) )(0)(0) + 1*1;

	(R) := ( (V) )(0);
	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# ((vec)) -> ((vec; e))
(F_vec_pop) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;

	( (V) )(0)(0) := ( (V) )(0)(0) - 1*1;

	(R) := (( ( (V) )(0); ( (V) )(0)(1)( ( (V) )(0)(0) ) ));
	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# ((array)) -> vec
(F_to_vec) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;
	( (V) )(Array) := ( (V) )(0);

	( (V) + 1*1 ) := (());
	(F_vec_create);
	( (V) )(Vec) := (R);

	( (V) + 1*1 ) := (( ( (V) )(Array) ));
	(F_len);
	( (V) )(Len) := (R);

	( (V) )(I) := 0;

	# loop
	((
		( (V) )(I) < ( (V) )(Len);

		( (V) + 1*1 ) := (( ( (V) )(Vec); ( (V) )(Array)( ( (V) )(I) ) ));
		(F_vec_push);
		( (V) )(Vec) := (R);

		( (V) )(I) := ( (V) )(I) + 1;
	));

	(R) := ( (V) )(Vec);
	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# (()) -> token_vec
(F_read_token) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;

	( (V) + 1*1 ) := (());
	(F_vec_create);
	( (V) )(Token) := (R);

	(std_input);
	# loop
	((
		(std_input_char) = 9  || # TAB
		(std_input_char) = 10 || # \n
		(std_input_char) = 13 || # \r
		(std_input_char) = 32;   # SPACE

		(std_input);
	));

	# loop
	((
		(std_input_char) != 9  && # TAB
		(std_input_char) != 10 && # \n
		(std_input_char) != 13 && # \r
		(std_input_char) != 32;   # SPACE

		( (V) + 1*1 ) := (( ( (V) )(Token); (std_input_char) ));
		(F_vec_push);
		( (V) )(Token) := (R);

		(std_input);
	))

	(R) := ( (V) )(Token);
	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# (())
(F_ill_formed) := ((
	( (V) + 1*1 );
	(V) := (V) + 1*1;

	( (V) + 1*1 ) := (( ((73; 108; 108; 32; 102; 111; 114; 109; 101; 100; 32; 101; 113; 117; 97; 116; 105; 111; 110; 46; 10)) ));
	(F_print_str);

	( (V) ) := 0;
	(V) := (V) - 1*1;
));

# ((str))
(F_atoi) := ((
	
));

(S) := 0;
