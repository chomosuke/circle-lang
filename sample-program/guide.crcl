# This evaluates to 1, which allow the whole file to start executing
(S)

# As long as no other global circular array index starts with V there will not be a naming collision
; (V) := V_a

# Initialize ( (V) ) so that we can use this to store local variables
; ( (V) ) := ((0))

# ((Array)) -> len
; (F_len) := ((
  # Assumes that `( (V) + 1*1 )` has been set to `((0))` before the function is called.
  ( (V) + 1*1 )

  # Increment `(V)` for convenience and for recursive function call.
  ; (V) := (V) + 1*1

  # Put all local variable on `( (V) )`.
  ; ( (V) )(I) := 1

  # loop
  ; ((
    ( (V) )(Not_found_len)

    ; ( (V) )(Array)(0) := 0
    ; ( (V) )(Array)( ( (V) )(I) ) := 1
    ; ( (V) )(Not_found_len) := ( (V) )(Array)(0) != 1

    ; ( (V) )(I) := ( (V) )(I) + 1
  ))

  ; ( (V) )(I) := ( (V) )(I) - 1

  # Use `(R)` to store return values
  ; (R) := ( (V) )(I)

  # Set `( (V) )` to 0 to prevent the function / array to be executed again
  ; ( (V) ) := 0

  # Decrement `(V)` to revert earlier incrementation.
  ; (V) := (V) - 1*1
))

# Initialized the next call stack to be `((0))` just as every function assumes.
# Without this (F_len) would not execute
; ( (V) + 1*1 ) := ((0))

# Set argument
; ( (V) + 1*1 )(Array) := ((a; r; r))

# Evaluate the array at `(F_len)` which we defined earlier
; (F_len)

# Fetch return value
; ( (V) )(Len) := (R)

# If statement
# Set `(S)` to the condition of the if statement
; (S) := ( (V) )(Len) = 3

# If `(S)` is non zero the if statement will execute
; ((
  (S)
  ; (std_output_char) := y * 1
  ; (std_output)

  # Prevent the array from executing again
  ; (S) := 0
))
# (S) = 0 no matter if the array executed or not

# To prevent the whole file from executing again
; (S) := 0
